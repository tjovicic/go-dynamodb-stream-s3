service: go-dynamodb-stream-s3

custom:
  dynamodb:
    tableName: users
    batchSize: 10
    batchWindow: 10
    startingPosition: LATEST # Process new records that are added to the stream
    maximumRetryAttempts: 10

  firehose:
    createDeliveryStreamName: create-stream
    updateDeliveryStreamName: update-stream
    deleteDeliveryStreamName: delete-stream
    bufferInterval: 60
    bufferSize: 1
    prefix:
      create: "dynamodb/INSERT/year=!{timestamp:yyyy}/month=!{timestamp:M}/day=!{timestamp:d}/"
      update: "dynamodb/MODIFY/year=!{timestamp:yyyy}/month=!{timestamp:M}/day=!{timestamp:d}/"
      delete: "dynamodb/REMOVE/year=!{timestamp:yyyy}/month=!{timestamp:M}/day=!{timestamp:d}/"
    errorPrefix:
      create: "dynamodb-error/INSERT/year=!{timestamp:yyyy}/month=!{timestamp:M}/day=!{timestamp:d}/!{firehose:error-output-type}/"
      update: "dynamodb-error/MODIFY/year=!{timestamp:yyyy}/month=!{timestamp:M}/day=!{timestamp:d}/!{firehose:error-output-type}/"
      delete: "dynamodb-error/REMOVE/year=!{timestamp:yyyy}/month=!{timestamp:M}/day=!{timestamp:d}/!{firehose:error-output-type}/"
  s3:
    bucketName: go-metadata-pipeline

provider: 
  name: aws
  runtime: go1.x
  timeout: 60

  region: eu-central-1
  stage: dev

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:DescribeStream"
        - "dynamodb:GetRecords"
        - "dynamodb:GetShardIterator"
        - "dynamodb:ListStreams"
      Resource:
        - Fn::Join:
            - ""
            - - "arn:aws:dynamodb:"
              - Ref: "AWS::Region"
              - ":"
              - Ref: "AWS::AccountId"
              - ":table/${self:custom.dynamodb.tableName}"

    - Effect: "Allow"
      Action:
        - "firehose:PutRecordBatch"
      Resource:
        - Fn::Join:
            - ""
            - - "arn:aws:firehose:"
              - Ref: "AWS::Region"
              - ":"
              - Ref: "AWS::AccountId"
              - ":deliverystream/${self:custom.firehose.createDeliveryStreamName}"
        - Fn::Join:
            - ""
            - - "arn:aws:firehose:"
              - Ref: "AWS::Region"
              - ":"
              - Ref: "AWS::AccountId"
              - ":deliverystream/${self:custom.firehose.updateDeliveryStreamName}"
        - Fn::Join:
            - ""
            - - "arn:aws:firehose:"
              - Ref: "AWS::Region"
              - ":"
              - Ref: "AWS::AccountId"
              - ":deliverystream/${self:custom.firehose.deleteDeliveryStreamName}"

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  # function is invoked when one of the following conditions is met: 
  # the payload size reaches 6MB, the Batch Window reaches its maximum value, 
  # or the Batch Size reaches its maximum value
  dynamoStreamHandler:
    handler: bin/main
    environment:
      CREATE_STREAM_NAME: ${self:custom.firehose.createDeliveryStreamName}
      UPDATE_STREAM_NAME: ${self:custom.firehose.updateDeliveryStreamName}
      DELETE_STREAM_NAME: ${self:custom.firehose.deleteDeliveryStreamName}
      DYNAMO_STREAM_ARN:
        Fn::GetAtt: [DynamoDBTable, StreamArn]
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [DynamoDBTable, StreamArn]
          batchSize: ${self:custom.dynamodb.batchSize}
          batchWindow: ${self:custom.dynamodb.batchWindow}
          startingPosition: ${self:custom.dynamodb.startingPosition}
          maximumRetryAttempts: ${self:custom.dynamodb.maximumRetryAttempts}

resources: 
  Resources:
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamodb.tableName}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    
    CreateKinesisFirehoseStream:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamName: ${self:custom.firehose.createDeliveryStreamName}
        DeliveryStreamType: DirectPut
        ExtendedS3DestinationConfiguration: 
          BucketARN: arn:aws:s3:::${self:custom.s3.bucketName}
          Prefix: ${self:custom.firehose.prefix.create}
          ErrorOutputPrefix: ${self:custom.firehose.errorPrefix.create}
          RoleARN: !GetAtt DeliveryRole.Arn
          BufferingHints:
            IntervalInSeconds: ${self:custom.firehose.bufferInterval}
            SizeInMBs: ${self:custom.firehose.bufferSize}
#          CompressionFormat: GZIP
          CompressionFormat: UNCOMPRESSED

    UpdateKinesisFirehoseStream:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamName: ${self:custom.firehose.updateDeliveryStreamName}
        DeliveryStreamType: DirectPut
        ExtendedS3DestinationConfiguration:
          BucketARN: arn:aws:s3:::${self:custom.s3.bucketName}
          Prefix: ${self:custom.firehose.prefix.update}
          ErrorOutputPrefix: ${self:custom.firehose.errorPrefix.update}
          RoleARN: !GetAtt DeliveryRole.Arn
          BufferingHints:
            IntervalInSeconds: ${self:custom.firehose.bufferInterval}
            SizeInMBs: ${self:custom.firehose.bufferSize}
#          CompressionFormat: GZIP
          CompressionFormat: UNCOMPRESSED

    DeleteKinesisFirehoseStream:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamName: ${self:custom.firehose.deleteDeliveryStreamName}
        DeliveryStreamType: DirectPut
        ExtendedS3DestinationConfiguration:
          BucketARN: arn:aws:s3:::${self:custom.s3.bucketName}
          Prefix: ${self:custom.firehose.prefix.delete}
          ErrorOutputPrefix: ${self:custom.firehose.errorPrefix.delete}
          RoleARN: !GetAtt DeliveryRole.Arn
          BufferingHints:
            IntervalInSeconds: ${self:custom.firehose.bufferInterval}
            SizeInMBs: ${self:custom.firehose.bufferSize}
#          CompressionFormat: GZIP
          CompressionFormat: UNCOMPRESSED

    DeliveryRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: ""
              Effect: Allow
              Principal:
                Service: firehose.amazonaws.com
              Action: "sts:AssumeRole"
              Condition:
                StringEquals:
                  "sts:ExternalId": !Ref "AWS::AccountId"

    DeliveryPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: firehose_delivery_policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "s3:AbortMultipartUpload"
                - "s3:GetBucketLocation"
                - "s3:GetObject"
                - "s3:ListBucket"
                - "s3:ListBucketMultipartUploads"
                - "s3:PutObject"
              Resource:
                - !Sub "arn:aws:s3:::${self:custom.s3.bucketName}"
                - !Sub "arn:aws:s3:::${self:custom.s3.bucketName}*"
        Roles:
          - !Ref DeliveryRole
